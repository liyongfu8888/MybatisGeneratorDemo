<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cyjr.dao.TbUserAccountLogMapper">
  <resultMap id="BaseResultMap" type="com.cyjr.model.TbUserAccountLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="id_related" jdbcType="INTEGER" property="idRelated" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="money_operate" jdbcType="DECIMAL" property="moneyOperate" />
    <result column="money_total" jdbcType="DECIMAL" property="moneyTotal" />
    <result column="money_usable" jdbcType="DECIMAL" property="moneyUsable" />
    <result column="money_tender_freeze" jdbcType="DECIMAL" property="moneyTenderFreeze" />
    <result column="money_collection" jdbcType="DECIMAL" property="moneyCollection" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="created_at" jdbcType="INTEGER" property="createdAt" />
    <result column="created_ip" jdbcType="VARCHAR" property="createdIp" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, id_related, type, money_operate, money_total, money_usable, money_tender_freeze, 
    money_collection, remark, created_at, created_ip
  </sql>
  <select id="selectByExample" parameterType="com.cyjr.model.TbUserAccountLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_user_account_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_user_account_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_user_account_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cyjr.model.TbUserAccountLogExample">
    delete from tb_user_account_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cyjr.model.TbUserAccountLog">
    insert into tb_user_account_log (id, user_id, id_related, 
      type, money_operate, money_total, 
      money_usable, money_tender_freeze, money_collection, 
      remark, created_at, created_ip
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{idRelated,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{moneyOperate,jdbcType=DECIMAL}, #{moneyTotal,jdbcType=DECIMAL}, 
      #{moneyUsable,jdbcType=DECIMAL}, #{moneyTenderFreeze,jdbcType=DECIMAL}, #{moneyCollection,jdbcType=DECIMAL}, 
      #{remark,jdbcType=VARCHAR}, #{createdAt,jdbcType=INTEGER}, #{createdIp,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.cyjr.model.TbUserAccountLog">
    insert into tb_user_account_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="idRelated != null">
        id_related,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="moneyOperate != null">
        money_operate,
      </if>
      <if test="moneyTotal != null">
        money_total,
      </if>
      <if test="moneyUsable != null">
        money_usable,
      </if>
      <if test="moneyTenderFreeze != null">
        money_tender_freeze,
      </if>
      <if test="moneyCollection != null">
        money_collection,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="createdIp != null">
        created_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="idRelated != null">
        #{idRelated,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="moneyOperate != null">
        #{moneyOperate,jdbcType=DECIMAL},
      </if>
      <if test="moneyTotal != null">
        #{moneyTotal,jdbcType=DECIMAL},
      </if>
      <if test="moneyUsable != null">
        #{moneyUsable,jdbcType=DECIMAL},
      </if>
      <if test="moneyTenderFreeze != null">
        #{moneyTenderFreeze,jdbcType=DECIMAL},
      </if>
      <if test="moneyCollection != null">
        #{moneyCollection,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=INTEGER},
      </if>
      <if test="createdIp != null">
        #{createdIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cyjr.model.TbUserAccountLogExample" resultType="java.lang.Long">
    select count(*) from tb_user_account_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_user_account_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.idRelated != null">
        id_related = #{record.idRelated,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.moneyOperate != null">
        money_operate = #{record.moneyOperate,jdbcType=DECIMAL},
      </if>
      <if test="record.moneyTotal != null">
        money_total = #{record.moneyTotal,jdbcType=DECIMAL},
      </if>
      <if test="record.moneyUsable != null">
        money_usable = #{record.moneyUsable,jdbcType=DECIMAL},
      </if>
      <if test="record.moneyTenderFreeze != null">
        money_tender_freeze = #{record.moneyTenderFreeze,jdbcType=DECIMAL},
      </if>
      <if test="record.moneyCollection != null">
        money_collection = #{record.moneyCollection,jdbcType=DECIMAL},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=INTEGER},
      </if>
      <if test="record.createdIp != null">
        created_ip = #{record.createdIp,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_user_account_log
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      id_related = #{record.idRelated,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      money_operate = #{record.moneyOperate,jdbcType=DECIMAL},
      money_total = #{record.moneyTotal,jdbcType=DECIMAL},
      money_usable = #{record.moneyUsable,jdbcType=DECIMAL},
      money_tender_freeze = #{record.moneyTenderFreeze,jdbcType=DECIMAL},
      money_collection = #{record.moneyCollection,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=INTEGER},
      created_ip = #{record.createdIp,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cyjr.model.TbUserAccountLog">
    update tb_user_account_log
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="idRelated != null">
        id_related = #{idRelated,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="moneyOperate != null">
        money_operate = #{moneyOperate,jdbcType=DECIMAL},
      </if>
      <if test="moneyTotal != null">
        money_total = #{moneyTotal,jdbcType=DECIMAL},
      </if>
      <if test="moneyUsable != null">
        money_usable = #{moneyUsable,jdbcType=DECIMAL},
      </if>
      <if test="moneyTenderFreeze != null">
        money_tender_freeze = #{moneyTenderFreeze,jdbcType=DECIMAL},
      </if>
      <if test="moneyCollection != null">
        money_collection = #{moneyCollection,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=INTEGER},
      </if>
      <if test="createdIp != null">
        created_ip = #{createdIp,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cyjr.model.TbUserAccountLog">
    update tb_user_account_log
    set user_id = #{userId,jdbcType=INTEGER},
      id_related = #{idRelated,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      money_operate = #{moneyOperate,jdbcType=DECIMAL},
      money_total = #{moneyTotal,jdbcType=DECIMAL},
      money_usable = #{moneyUsable,jdbcType=DECIMAL},
      money_tender_freeze = #{moneyTenderFreeze,jdbcType=DECIMAL},
      money_collection = #{moneyCollection,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=INTEGER},
      created_ip = #{createdIp,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>